name: Poc Org Deployment
on:
  push:
    branches:
      - demo  # Trigger deployment when changes are pushed to the 'demo' branch
jobs:
  deploy-lwc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetches all history for all branches and tags
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Salesforce CLI
        run: |
          npm install @salesforce/cli --global
          sf --version
          
      - name: Install dependencies
        run: |
          # Only run npm install if package.json exists
          if [ -f "package.json" ]; then
            npm install
          else
            echo "No package.json found, skipping npm install"
          fi
        
      - name: Authenticate with Salesforce
        run: |
          echo "${{ secrets.DEMO_AUTH_URL }}" > ./SALESFORCE_AUTH_URL.txt
          sf org login sfdx-url -f ./SALESFORCE_AUTH_URL.txt -a targetOrg
      
      - name: Find Changed Files
        id: changed-files
        run: |
          # Get the previous commit hash
          PREV_COMMIT=$(git rev-parse HEAD~1)
          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "Comparing changes between $PREV_COMMIT and $CURRENT_COMMIT"
          
          # Create directory for changed files list
          mkdir -p ./changed_files
          
          # Find changed files in force-app/main/default/lwc
          git diff --name-only $PREV_COMMIT $CURRENT_COMMIT -- force-app/main/default/lwc > ./changed_files/lwc_changes.txt
          
          if [ -s ./changed_files/lwc_changes.txt ]; then
            echo "Changed LWC files detected:"
            cat ./changed_files/lwc_changes.txt
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
          else
            echo "No LWC changes detected"
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          fi
        
      - name: Validate LWC Components
        if: env.HAS_CHANGES == 'true'
        run: |
          echo "Validating LWC components..."
          cat ./changed_files/lwc_components.txt | while read -r COMPONENT_PATH; do
            COMPONENT_NAME=$(basename "$COMPONENT_PATH")
            echo "Checking $COMPONENT_NAME..."
            
            # Check for required files
            for file in "$COMPONENT_PATH/$COMPONENT_NAME.js" "$COMPONENT_PATH/$COMPONENT_NAME.html"; do
              if [ ! -f "$file" ]; then
                echo "::error::Missing required file: $file"
                exit 1
              fi
            done
          done
          
      - name: Create Deployment Manifest
        if: env.HAS_CHANGES == 'true'
        run: |
          mkdir -p manifest
          echo '<?xml version="1.0" encoding="UTF-8"?>' > manifest/package.xml
          echo '<Package xmlns="http://soap.sforce.com/2006/04/metadata">' >> manifest/package.xml
          
          # Add LWC components
          echo '    <types>' >> manifest/package.xml
          cat ./changed_files/lwc_components.txt | while read -r COMPONENT_PATH; do
            COMPONENT_NAME=$(basename "$COMPONENT_PATH")
            echo "        <members>$COMPONENT_NAME</members>" >> manifest/package.xml
          done
          echo '        <name>LightningComponentBundle</name>' >> manifest/package.xml
          echo '    </types>' >> manifest/package.xml
          
          echo '</Package>' >> manifest/package.xml
          
          echo "Deployment manifest:"
          cat manifest/package.xml
          
      - name: Deploy Changes
        if: env.HAS_CHANGES == 'true'
        run: |
          echo "Starting deployment..."
          sf project deploy start \
            -o targetOrg \
            -l NoTestRun \
            -x manifest/package.xml \
            --json \
            --wait 30 \
            > deployment_result.json || (echo "::error::Deployment failed" && exit 1)
          
          # Check deployment result
          if [ -f "deployment_result.json" ]; then
            STATUS=$(jq -r '.result.status' deployment_result.json)
            if [ "$STATUS" != "Succeeded" ]; then
              echo "::error::Deployment failed with status: $STATUS"
              jq '.result' deployment_result.json
              exit 1
            else
              echo "Deployment succeeded!"
              jq '.result' deployment_result.json
            fi
          else
            echo "::error::No deployment result file found"
            exit 1
          end
      
      - name: Skip Deployment Notice
        if: env.HAS_CHANGES == 'false'
        run: |
          echo "No LWC changes detected in this commit. Skipping deployment."
