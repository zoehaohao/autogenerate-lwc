import {
  LightningElement
} from 'lwc';
export default class PersonalDetailsForm extends LightningElement {
  handleSubmit(event) {
      event.preventDefault();
      if (this
      .validateForm()) { // Perform form submission logic here            console.log('Form submitted successfully');        } else {            console.error('Form validation failed');        }    }    validateForm() {        const inputFields = this.template.querySelectorAll('.acme-personal-details-form__input');        let isValid = true;        inputFields.forEach(field => {            if (field.required && !field.value) {                this.showError(field, 'This field is required');                isValid = false;            } else if (field.id === 'zipCode' && !this.isValidAustralianPostalCode(field.value)) {                this.showError(field, 'Invalid Australian postal code');                isValid = false;            } else if (field.type === 'date' && !this.isValidDate(field.value)) {                this.showError(field, 'Invalid date');                isValid = false;            } else {                this.clearError(field);            }        });        const startDate = this.template.querySelector('#startDate').value;        const endDate = this.template.querySelector('#endDate').value;        if (startDate && endDate && new Date(endDate) <= new Date(startDate)) {            this.showError(this.template.querySelector('#endDate'), 'End Date must be after Start Date');            isValid = false;        }        return isValid;    }    isValidAustralianPostalCode(postalCode) {        return /^[0-9]{4}$/.test(postalCode);    }    isValidDate(dateString) {        return !isNaN(new Date(dateString).getTime());    }    showError(field, message) {        field.setCustomValidity(message);        field.reportValidity();    }    clearError(field) {        field.setCustomValidity('');    }}
